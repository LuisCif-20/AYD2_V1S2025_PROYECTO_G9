name: Deploy Backend with Docker

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'   # Solo cuando hay cambios en la carpeta backend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código
      - name: 🚀 Checkout del Código
        uses: actions/checkout@v4

      # Paso 2: Configurar Java 21 (usando la distribución Temurin)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'  # Especificamos la versión de Java 21
          distribution: 'temurin'  # Usamos Temurin, la distribución de Eclipse Adoptium

      # Paso 3: Configurar Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Paso 4: Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Paso 5: Construir el contenedor
      - name: 📦 Construir el Backend con Docker Compose
        working-directory: backend
        run: |
          ./mvnw clean package -DskipTests

      - name: Verificar clave del servidor SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST_OR }} >> ~/.ssh/known_hosts

      - name: Cargar clave privada SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_OR }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Paso 6: Subir Docker Compose y el código al servidor
      - name: Subir Docker Compose y el código al servidor
        working-directory: backend
        run: |
          scp -i ~/.ssh/id_rsa target/*.jar ${{ secrets.SSH_USER_OR }}@${{ secrets.SSH_HOST_OR }}:/home/${{ secrets.SSH_USER_OR }}/backend.jar
          # Copiar el archivo docker-compose.yml al servidor remoto
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER_OR }}@${{ secrets.SSH_HOST_OR }}:/home/${{ secrets.SSH_USER_OR }}/project/docker-compose.yml
          # Copiar el código al servidor si es necesario
          scp -i ~/.ssh/id_rsa -r target/* ${{ secrets.SSH_USER_OR }}@${{ secrets.SSH_HOST_OR }}:/home/${{ secrets.SSH_USER_OR }}/project/

      # Paso 7: Copiar el archivo .jar al directorio 'target' en el servidor
      - name: Copiar el archivo .jar al directorio target del proyecto
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_OR }}@${{ secrets.SSH_HOST_OR }} << 'EOF'
            # Crear el directorio 'target' si no existe
            mkdir -p /home/${{ secrets.SSH_USER_OR }}/project/target
            # Copiar el archivo .jar al directorio 'target'
            cp /home/${{ secrets.SSH_USER_OR }}/backend.jar /home/${{ secrets.SSH_USER_OR }}/project/target/backend.jar
          EOF

      # Paso 8: Ejecutar Docker Compose en el servidor remoto
      - name: Ejecutar Docker Compose en el servidor remoto
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER_OR }}@${{ secrets.SSH_HOST_OR }} << 'EOF'
            # Crear el directorio del proyecto si no existe
            mkdir -p /home/${{ secrets.SSH_USER_OR }}/project
            cd /home/${{ secrets.SSH_USER_OR }}/project || exit
          
            # Si el repositorio ya existe, actualizarlo; de lo contrario, clonarlo
            if [ -d ".git" ]; then
              echo "Repositorio encontrado. Actualizando..."
              git reset --hard
              git pull origin main
            else
              echo "Repositorio no encontrado. Clonando..."
              git clone git@github.com:adolfosonchiche/CodeNBugs.git .
            fi
          
            # Verificar si los archivos necesarios existen
            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml no encontrado en el servidor"
              exit 1
            fi
          
            if [ ! -f "Dockerfile" ]; then
              echo "Error: Dockerfile no encontrado en el servidor"
              exit 1
            fi
          
            # Verificar si el archivo .jar ha sido copiado al directorio 'target'
            if [ ! -f "/home/${{ secrets.SSH_USER_OR }}/project/target/backend.jar" ]; then
              echo "Error: backend.jar no encontrado en el directorio 'target'"
              exit 1
            fi
          
            # Construir y levantar los contenedores con Docker Compose
            echo "Construyendo y levantando contenedores con Docker Compose..."
            docker-compose -f docker-compose.yml build
            docker-compose -f docker-compose.yml up -d
          EOF

